Purpose and Main Use of Code
This code creates a simple IPC mechanism using FIFOs, allowing a parent process to send text input to a child process, which then counts the number of characters, words, and lines in that text, writes the results to a file, and sends the results back to the parent.

Libraries Explanation
#include <stdio.h>: Standard I/O library for input/output operations.
#include <stdlib.h>: Standard library for memory allocation, process control, and conversions.
#include <string.h>: Provides string manipulation functions such as strlen, strcat, and strcmp.
#include <unistd.h>: Provides access to the POSIX operating system API for system calls.
#include <sys/types.h> and #include <sys/wait.h>: Required for process management, including fork and wait functions.
#include <fcntl.h>: Provides file control options, particularly for file opening modes.
Code Explanation with Comments
c
Copy code
#define FIFO1 "/tmp/fifo1" // First named pipe for communication from parent to child
#define FIFO2 "/tmp/fifo2" // Second named pipe for communication from child to parent

// Function to count characters, words, and lines
void count_and_write(const char *sentence) {
    int characters = 0, words = 0, lines = 0;
    int inWord = 0; // To track if we're currently in a word

    // Count characters, words, and lines
    for (int i = 0; i < strlen(sentence); i++) {
        if (sentence[i] != '\n') { // Exclude newline from character count
            characters++;
        }
        if (sentence[i] == ' ' || sentence[i] == '\n') {
            if (inWord) {
                words++; // End of a word
                inWord = 0; // Not in a word anymore
            }
            if (sentence[i] == '\n') {
                lines++; // Count lines based on newline
            }
        } else {
            inWord = 1; // We're in a word
        }
    }

    // Count the last word if necessary
    if (inWord) {
        words++;
    }

    // Open file to write results
    FILE *fp = fopen("output.txt", "w");
    if (fp != NULL) {
        fprintf(fp, "Characters: %d\nWords: %d\nLines: %d\n", characters, words, lines);
        fclose(fp);
    } else {
        perror("Failed to open file");
    }
}

// Child process to read from FIFO1, count, and write results to FIFO2
void child_process() {
    char sentence[200];
    int fd1 = open(FIFO1, O_RDONLY); // Open FIFO1 for reading
    int fd2 = open(FIFO2, O_WRONLY); // Open FIFO2 for writing

    // Read the sentence from the first pipe
    read(fd1, sentence, sizeof(sentence));
    close(fd1); // Close the read end of FIFO1

    // Count characters, words, and lines
    count_and_write(sentence);

    // Open the output file and read its content to send back to the parent
    FILE *fp = fopen("output.txt", "r");
    char ch;
    while ((ch = fgetc(fp)) != EOF) {
        write(fd2, &ch, sizeof(ch)); // Write each character to FIFO2
    }
    fclose(fp);
    close(fd2); // Close the write end of FIFO2

    exit(0); // Terminate the child process
}

// Parent process to read input and communicate with the child process
void parent_process() {
    char sentence[200];
    char buffer[200];
    sentence[0] = '\0';  // Initialize sentence to be an empty string
    int fd1 = open(FIFO1, O_WRONLY); // Open FIFO1 for writing
    int fd2 = open(FIFO2, O_RDONLY); // Open FIFO2 for reading

    // Get input from user line by line
    printf("Enter multiple lines of text (end input with a blank line):\n");
    
    while (1) {
        fgets(buffer, sizeof(buffer), stdin);
        // If user enters a blank line (newline only), stop input
        if (strcmp(buffer, "\n") == 0) {
            break;
        }
        // Append the buffer to sentence
        strcat(sentence, buffer);
    }

    // Send the full sentence to child through FIFO1
    write(fd1, sentence, strlen(sentence) + 1); // +1 to include null terminator
    close(fd1); // Close the write end of FIFO1

    // Wait for child process to finish
    wait(NULL);

    // Read results from FIFO2
    printf("\nResults received from child process:\n");
    char ch;
    while (read(fd2, &ch, sizeof(ch)) > 0) {
        printf("%c", ch); // Output the content received
    }
    close(fd2); // Close the read end of FIFO2
}

int main() {
    // Create named pipes (FIFOs)
    mkfifo(FIFO1, 0666); // Create FIFO1
    mkfifo(FIFO2, 0666); // Create FIFO2

    pid_t pid = fork(); // Fork a new process

    if (pid < 0) {
        perror("Fork failed");
        return 1;
    } else if (pid == 0) {
        // Child process
        child_process();
    } else {
        // Parent process
        parent_process();
    }

    // Remove the named pipes
    unlink(FIFO1);
    unlink(FIFO2);

    return 0;
}
Explanation of Key Sections
Named Pipes (FIFOs):

Two FIFOs are defined to allow communication between the parent and child processes. FIFO1 is used for sending input from the parent to the child, and FIFO2 is used for sending the results back from the child to the parent.
Function count_and_write:

Counts the number of characters, words, and lines in the input string and writes the results to an output file (output.txt).
Child Process:

The child process reads from FIFO1, processes the data by counting characters, words, and lines, and writes the output back to FIFO2.
Parent Process:

The parent process reads user input, which can span multiple lines, concatenates it into a single string, and sends it to the child process. After the child has completed its task, the parent reads the results from FIFO2 and prints them.
Possible Questions and Answers
What is the purpose of using FIFOs in this code?

FIFOs provide a mechanism for IPC, allowing the parent process to send data to the child process and receive results back.
How does the program count words, characters, and lines?

The count_and_write function iterates through the input string, counting characters (excluding newlines), tracking word boundaries, and counting lines based on newline characters.
What happens if the output file cannot be opened for writing?

If the output file cannot be opened, the program prints an error message using perror to indicate the failure.
How does the parent process determine when to stop reading input?

The parent process stops reading input when the user enters a blank line (just pressing Enter).
What would happen if the child process tries to read from FIFO1 before the parent writes to it?

The child process will block (wait) until the parent writes data to FIFO1, as FIFOs operate in a blocking mode when there are no readers or writers.
Additional Notes
Error Handling: The code has basic error handling, but it could be improved by checking the return values of read, write, and other system calls.

Resource Cleanup: Named pipes are removed after the processes complete, ensuring there are no leftover resources.

Input Buffer Size: The input size for sentences is limited to 200 characters; handling larger inputs would require dynamic memory management or a different approach.
